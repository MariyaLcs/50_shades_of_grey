{"version":3,"sources":["App.js","registerServiceWorker.js","index.js"],"names":["Box","style","width","height","display","backgroundColor","color","App","props","boxes","Array","fill","map","getRandomColor","state","setInterval","slice","Math","floor","random","length","setState","colorIndex","this","allColors","index","key","className","Component","defaultProps","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","catch","error","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","fetch","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"+OAKMA,G,MAAM,SAAC,GAAe,IACpBC,EAAQ,CACZC,MAAO,QACPC,OAAQ,QACRC,QAAS,eACTC,gBALuB,EAAZC,OAOb,OAAO,yBAAKL,MAAOA,MAGfM,E,kDACJ,WAAYC,GAAQ,IAAD,sBACjB,cAAMA,GACN,IAAMC,EAAQC,MAfA,IAeiBC,OAAOC,IAAI,EAAKC,eAAjC,gBAFG,OAGjB,EAAKC,MAAQ,CAAEL,SAEfM,aAAY,WACV,IAAMN,EAAQ,EAAKK,MAAML,MAAMO,QAE/BP,EADkBQ,KAAKC,MAAMD,KAAKE,SAAWV,EAAMW,SAChC,EAAKP,iBACxB,EAAKQ,SAAS,CAAEZ,YACf,KAVc,E,6DAcjB,IAAIa,EAAaL,KAAKC,MAAMD,KAAKE,SAAWI,KAAKf,MAAMgB,UAAUJ,QACjE,OAAOG,KAAKf,MAAMgB,UAAUF,K,+BAI5B,IAAMb,EAAQc,KAAKT,MAAML,MAAMG,KAAI,SAACN,EAAOmB,GAAR,OACjC,kBAAC,EAAD,CAAKC,IAAKD,EAAOnB,MAAOA,OAE1B,OAAO,yBAAKqB,UAAU,OAAOlB,O,GAvBfmB,aA2BlBrB,EAAIsB,aAAe,CACjBL,UAAW,CACT,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,YAIWjB,QCtETuB,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DA6BN,SAASC,EAAgBC,GACvBC,UAAUC,cACPC,SAASH,GACTI,MAAK,SAAAC,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACtCD,EAAiBE,cAAgB,WACA,cAA3BF,EAAiB9B,QACfwB,UAAUC,cAAcQ,WAK1BC,QAAQC,IAAI,6CAKZD,QAAQC,IAAI,4CAMrBC,OAAM,SAAAC,GACLH,QAAQG,MAAM,4CAA6CA,MChEjEC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDclC,WACb,GAA6C,kBAAmBjB,UAAW,CAGzE,GADkB,IAAIkB,IAAIC,qBAAwBzB,OAAOC,UAC3CyB,SAAW1B,OAAOC,SAASyB,OAIvC,OAGF1B,OAAO2B,iBAAiB,QAAQ,WAC9B,IAAMtB,EAAK,UAAMoB,qBAAN,sBAEN3B,EAwCX,SAAiCO,GAE/BuB,MAAMvB,GACHI,MAAK,SAAAoB,GAGkB,MAApBA,EAASC,SACuD,IAAhED,EAASE,QAAQC,IAAI,gBAAgBC,QAAQ,cAG7C3B,UAAUC,cAAc2B,MAAMzB,MAAK,SAAAC,GACjCA,EAAayB,aAAa1B,MAAK,WAC7BT,OAAOC,SAASmC,eAKpBhC,EAAgBC,MAGnBa,OAAM,WACLF,QAAQC,IACN,oEAzDAoB,CAAwBhC,GAHxBD,EAAgBC,OC7BxBiC,I","file":"static/js/main.b3956642.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport \"./App.css\";\n\nconst NUM_BOXES = 31;\n\nconst Box = ({ color }) => {\n  const style = {\n    width: \"180px\",\n    height: \"180px\",\n    display: \"inline-block\",\n    backgroundColor: color,\n  };\n  return <div style={style} />;\n};\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    const boxes = Array(NUM_BOXES).fill().map(this.getRandomColor, this);\n    this.state = { boxes };\n\n    setInterval(() => {\n      const boxes = this.state.boxes.slice();\n      const randIndex = Math.floor(Math.random() * boxes.length);\n      boxes[randIndex] = this.getRandomColor();\n      this.setState({ boxes });\n    }, 3000);\n  }\n\n  getRandomColor() {\n    let colorIndex = Math.floor(Math.random() * this.props.allColors.length);\n    return this.props.allColors[colorIndex];\n  }\n\n  render() {\n    const boxes = this.state.boxes.map((color, index) => (\n      <Box key={index} color={color} />\n    ));\n    return <div className=\"App\">{boxes}</div>;\n  }\n}\n\nApp.defaultProps = {\n  allColors: [\n    \"#000000\",\n    \"#080808\",\n    \"#101010\",\n    \"#181818\",\n    \"#202020\",\n    \"#282828\",\n    \"#303030\",\n    \"#383838\",\n    \"#404040\",\n    \"#484848\",\n    \"#505050\",\n    \"#585858\",\n    \"#606060\",\n    \"#686868\",\n    \"#707070\",\n    \"#787878\",\n    \"#808080\",\n    \"#888888\",\n    \"#909090\",\n    \"#989898\",\n    \"#A0A0A0\",\n    \"#A8A8A8\",\n    \"#B0B0B0\",\n    \"#B8B8B8\",\n    \"#C0C0C0\",\n    \"#C8C8C8\",\n    \"#D0D0D0\",\n    \"#D8D8D8\",\n    \"#E0E0E0\",\n    \"#E8E8E8\",\n    \"#F0F0F0\",\n    \"#F8F8F8\",\n    \"#FFFFFF\",\n  ],\n};\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (!isLocalhost) {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      } else {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nregisterServiceWorker();\n"],"sourceRoot":""}